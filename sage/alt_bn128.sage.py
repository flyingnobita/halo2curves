

# This file was *autogenerated* from the file alt_bn128.sage
from sage.all_cmdline import *   # import sage library

_sage_const_36 = Integer(36); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_18 = Integer(18); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_24 = Integer(24); _sage_const_30 = Integer(30); _sage_const_0 = Integer(0); _sage_const_0x44e992b44a6909f1 = Integer(0x44e992b44a6909f1); _sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 = Integer(21888242871839275222246405745257275088548364400416034343698204186575808495617); _sage_const_21888242871839275222246405745257275088696311157297823662689037894645226208583 = Integer(21888242871839275222246405745257275088696311157297823662689037894645226208583)#!/usr/bin/env sage -python

# source: https://github.com/scipr-lab/libff/blob/develop/libff/algebra/curves/alt_bn128/alt_bn128.sage

from sage.all import *
import sys
sys.path.append("../")
import params_generator

# Prime order of the subgroup we work in
def r(x):
    return _sage_const_36 *(x**_sage_const_4 ) + _sage_const_36 *(x**_sage_const_3 ) + _sage_const_18 *(x**_sage_const_2 ) + _sage_const_6 *x + _sage_const_1 

# Prime used to generate the base finite field
def q(x):
    return _sage_const_36 *(x**_sage_const_4 ) + _sage_const_36 *(x**_sage_const_3 ) + _sage_const_24 *(x**_sage_const_2 ) + _sage_const_6 *x + _sage_const_1 

# Compute G2 cofactor
# See: Proposition 1, Section 3.3: https://eprint.iacr.org/2015/247.pdf
def g2_h(x):
    return _sage_const_36 *x**_sage_const_4 + _sage_const_36 *x**_sage_const_3 + _sage_const_30 *x**_sage_const_2 + _sage_const_6 *x + _sage_const_1 

# Computes the order of G1, the safe subgroup of E/Fq
def g1_order(curve_order):
    decomposition = factor(curve_order)
    # Factor returns the prime decomposition and orders prime
    # factors from smaller to biggest
    biggest_factor = decomposition[-_sage_const_1 ]
    assert(biggest_factor[_sage_const_1 ] == _sage_const_1 )
    return biggest_factor[_sage_const_0 ]

def main():
    print("Generating parameters for alt_bn128")
    # Curve parameter
    param = _sage_const_0x44e992b44a6909f1 

    prime_r = r(param)
    assert(prime_r == _sage_const_21888242871839275222246405745257275088548364400416034343698204186575808495617 )

    prime_q = q(param)
    assert(prime_q == _sage_const_21888242871839275222246405745257275088696311157297823662689037894645226208583 )
    if (mod(prime_q, _sage_const_6 ) != _sage_const_1 ):
        raise BaseException("Unexpected: q should be = 1 (mod 6). See: https://eprint.iacr.org/2007/390.pdf")

    # Scalar field
    print('prime_r = {}'.format(prime_r))
    #params_generator.generate_libff_Fp_model_params(prime_r)
    Fr = GF(prime_r)

    # Base field
    print('prime_q = {}'.format(prime_q))
    #params_generator.generate_libff_Fp_model_params(prime_q)
    Fq = GF(prime_q)

    # E/Fq
    curve = EllipticCurve(Fq, [_sage_const_0 , _sage_const_3 ])
    curve_order = curve.order()

    # Cofactors
    h1 = curve_order // g1_order(curve_order)
    # G1 cofactor should be 1
    assert(h1 == _sage_const_1 )
    print('h1 = {}'.format(h1))
    h2 = g2_h(param)
    print('h2 = {}'.format(h2))

if __name__ == '__main__':
    main()

